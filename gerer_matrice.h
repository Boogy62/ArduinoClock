void modifierMatrice(int chiffre, int pos, int afficheur[256])
{
  int couleur[35];
  for (int i = 0; i < 35; i++)
  {
    couleur[i] = 0;
  }
  switch (chiffre)
  {
    case 1:
      couleur[2] = 1;
      couleur[6] = 1;
      couleur[7] = 1;
      couleur[12] = 1;
      couleur[17] = 1;
      couleur[22] = 1;
      couleur[27] = 1;
      couleur[31] = 1;
      couleur[32] = 1;
      couleur[33] = 1;
      break;
    case 2:
      couleur[1] = 1;
      couleur[2] = 1;
      couleur[3] = 1;
      couleur[5] = 1;
      couleur[9] = 1;
      couleur[14] = 1;
      couleur[18] = 1;
      couleur[22] = 1;
      couleur[26] = 1;
      couleur[30] = 1;
      couleur[31] = 1;
      couleur[32] = 1;
      couleur[33] = 1;
      couleur[34] = 1;
      break;
    case 3:
      couleur[0] = 1;
      couleur[1] = 1;
      couleur[2] = 1;
      couleur[3] = 1;
      couleur[4] = 1;
      couleur[8] = 1;
      couleur[12] = 1;
      couleur[18] = 1;
      couleur[24] = 1;
      couleur[25] = 1;
      couleur[29] = 1;
      couleur[31] = 1;
      couleur[32] = 1;
      couleur[33] = 1;
      break;
    case 4:
      couleur[3] = 1;
      couleur[7] = 1;
      couleur[8] = 1;
      couleur[11] = 1;
      couleur[13] = 1;
      couleur[15] = 1;
      couleur[18] = 1;
      couleur[20] = 1;
      couleur[21] = 1;
      couleur[22] = 1;
      couleur[23] = 1;
      couleur[24] = 1;
      couleur[28] = 1;
      couleur[33] = 1;
      break;
    case 5:
      couleur[0] = 1;
      couleur[1] = 1;
      couleur[2] = 1;
      couleur[3] = 1;
      couleur[4] = 1;
      couleur[5] = 1;
      couleur[10] = 1;
      couleur[11] = 1;
      couleur[12] = 1;
      couleur[13] = 1;
      couleur[19] = 1;
      couleur[24] = 1;
      couleur[25] = 1;
      couleur[29] = 1;
      couleur[31] = 1;
      couleur[32] = 1;
      couleur[33] = 1;
      break;
    case 6:
      couleur[2] = 1;
      couleur[3] = 1;
      couleur[6] = 1;
      couleur[10] = 1;
      couleur[15] = 1;
      couleur[16] = 1;
      couleur[17] = 1;
      couleur[18] = 1;
      couleur[20] = 1;
      couleur[24] = 1;
      couleur[25] = 1;
      couleur[29] = 1;
      couleur[31] = 1;
      couleur[32] = 1;
      couleur[33] = 1;
      break;
    case 7:
      couleur[0] = 1;
      couleur[1] = 1;
      couleur[2] = 1;
      couleur[3] = 1;
      couleur[4] = 1;
      couleur[9] = 1;
      couleur[13] = 1;
      couleur[17] = 1;
      couleur[21] = 1;
      couleur[26] = 1;
      couleur[31] = 1;
      break;
    case 8:
      couleur[1] = 1;
      couleur[2] = 1;
      couleur[3] = 1;
      couleur[5] = 1;
      couleur[9] = 1;
      couleur[10] = 1;
      couleur[14] = 1;
      couleur[16] = 1;
      couleur[17] = 1;
      couleur[18] = 1;
      couleur[20] = 1;
      couleur[24] = 1;
      couleur[25] = 1;
      couleur[29] = 1;
      couleur[31] = 1;
      couleur[32] = 1;
      couleur[33] = 1;
      break;
    case 9:
      couleur[1] = 1;
      couleur[2] = 1;
      couleur[3] = 1;
      couleur[5] = 1;
      couleur[9] = 1;
      couleur[10] = 1;
      couleur[14] = 1;
      couleur[16] = 1;
      couleur[17] = 1;
      couleur[18] = 1;
      couleur[19] = 1;
      couleur[24] = 1;
      couleur[28] = 1;
      couleur[31] = 1;
      couleur[32] = 1;
      break;
    case 0:
      couleur[1] = 1;
      couleur[2] = 1;
      couleur[3] = 1;
      couleur[5] = 1;
      couleur[9] = 1;
      couleur[10] = 1;
      couleur[13] = 1;
      couleur[14] = 1;
      couleur[15] = 1;
      couleur[17] = 1;
      couleur[19] = 1;
      couleur[20] = 1;
      couleur[21] = 1;
      couleur[24] = 1;
      couleur[25] = 1;
      couleur[29] = 1;
      couleur[31] = 1;
      couleur[32] = 1;
      couleur[33] = 1;
      break;
    case 11:
      break;

  }
  switch (pos)
  {
    case 0 :
      afficheur[0] = couleur[0];
      afficheur[1] = couleur[1];
      afficheur[2] = couleur[2];
      afficheur[3] = couleur[3];
      afficheur[4] = couleur[4];
      afficheur[63] = couleur[5];
      afficheur[62] = couleur[6];
      afficheur[61] = couleur[7];
      afficheur[60] = couleur[8];
      afficheur[59] = couleur[9];
      afficheur[64] = couleur[10];
      afficheur[65] = couleur[11];
      afficheur[66] = couleur[12];
      afficheur[67] = couleur[13];
      afficheur[68] = couleur[14];
      afficheur[127] = couleur[15];
      afficheur[126] = couleur[16];
      afficheur[125] = couleur[17];
      afficheur[124] = couleur[18];
      afficheur[123] = couleur[19];
      afficheur[128] = couleur[20];
      afficheur[129] = couleur[21];
      afficheur[130] = couleur[22];
      afficheur[131] = couleur[23];
      afficheur[132] = couleur[24];
      afficheur[191] = couleur[25];
      afficheur[190] = couleur[26];
      afficheur[189] = couleur[27];
      afficheur[188] = couleur[28];
      afficheur[187] = couleur[29];
      afficheur[192] = couleur[30];
      afficheur[193] = couleur[31];
      afficheur[194] = couleur[32];
      afficheur[195] = couleur[33];
      afficheur[196] = couleur[34];
      break;
    case 1:
      afficheur[6] = couleur[0];
      afficheur[7] = couleur[1];
      afficheur[8] = couleur[2];
      afficheur[9] = couleur[3];
      afficheur[10] = couleur[4];
      afficheur[57] = couleur[5];
      afficheur[56] = couleur[6];
      afficheur[55] = couleur[7];
      afficheur[54] = couleur[8];
      afficheur[53] = couleur[9];
      afficheur[70] = couleur[10];
      afficheur[71] = couleur[11];
      afficheur[72] = couleur[12];
      afficheur[73] = couleur[13];
      afficheur[74] = couleur[14];
      afficheur[121] = couleur[15];
      afficheur[120] = couleur[16];
      afficheur[119] = couleur[17];
      afficheur[118] = couleur[18];
      afficheur[117] = couleur[19];
      afficheur[134] = couleur[20];
      afficheur[135] = couleur[21];
      afficheur[136] = couleur[22];
      afficheur[137] = couleur[23];
      afficheur[138] = couleur[24];
      afficheur[185] = couleur[25];
      afficheur[184] = couleur[26];
      afficheur[183] = couleur[27];
      afficheur[182] = couleur[28];
      afficheur[181] = couleur[29];
      afficheur[198] = couleur[30];
      afficheur[199] = couleur[31];
      afficheur[200] = couleur[32];
      afficheur[201] = couleur[33];
      afficheur[202] = couleur[34];
      break;
    case 2:
      afficheur[14] = couleur[0];
      afficheur[15] = couleur[1];
      afficheur[16] = couleur[2];
      afficheur[17] = couleur[3];
      afficheur[18] = couleur[4];
      afficheur[49] = couleur[5];
      afficheur[48] = couleur[6];
      afficheur[47] = couleur[7];
      afficheur[46] = couleur[8];
      afficheur[45] = couleur[9];
      afficheur[78] = couleur[10];
      afficheur[79] = couleur[11];
      afficheur[80] = couleur[12];
      afficheur[81] = couleur[13];
      afficheur[82] = couleur[14];
      afficheur[113] = couleur[15];
      afficheur[112] = couleur[16];
      afficheur[111] = couleur[17];
      afficheur[110] = couleur[18];
      afficheur[109] = couleur[19];
      afficheur[142] = couleur[20];
      afficheur[143] = couleur[21];
      afficheur[144] = couleur[22];
      afficheur[145] = couleur[23];
      afficheur[146] = couleur[24];
      afficheur[177] = couleur[25];
      afficheur[176] = couleur[26];
      afficheur[175] = couleur[27];
      afficheur[174] = couleur[28];
      afficheur[173] = couleur[29];
      afficheur[206] = couleur[30];
      afficheur[207] = couleur[31];
      afficheur[208] = couleur[32];
      afficheur[209] = couleur[33];
      afficheur[210] = couleur[34];
      break;
    case 3 :
      afficheur[20] = couleur[0];
      afficheur[21] = couleur[1];
      afficheur[22] = couleur[2];
      afficheur[23] = couleur[3];
      afficheur[24] = couleur[4];
      afficheur[43] = couleur[5];
      afficheur[42] = couleur[6];
      afficheur[41] = couleur[7];
      afficheur[40] = couleur[8];
      afficheur[39] = couleur[9];
      afficheur[84] = couleur[10];
      afficheur[85] = couleur[11];
      afficheur[86] = couleur[12];
      afficheur[87] = couleur[13];
      afficheur[88] = couleur[14];
      afficheur[107] = couleur[15];
      afficheur[106] = couleur[16];
      afficheur[105] = couleur[17];
      afficheur[104] = couleur[18];
      afficheur[103] = couleur[19];
      afficheur[148] = couleur[20];
      afficheur[149] = couleur[21];
      afficheur[150] = couleur[22];
      afficheur[151] = couleur[23];
      afficheur[152] = couleur[24];
      afficheur[171] = couleur[25];
      afficheur[170] = couleur[26];
      afficheur[169] = couleur[27];
      afficheur[168] = couleur[28];
      afficheur[167] = couleur[29];
      afficheur[212] = couleur[30];
      afficheur[213] = couleur[31];
      afficheur[214] = couleur[32];
      afficheur[215] = couleur[33];
      afficheur[216] = couleur[34];
      break;
  }
}


void afficherMatrice(int afficheur[256], int r, int g, int b, int mode, int secondes) {
  for (int i = 0; i < 256; i++) {
    if (afficheur[i] == 1) {
      leds[i].red = r;
      leds[i].green = g;
      leds[i].blue = b;
    }
    else {
      leds[i] = CRGB::Black;
    }
  }
  if (etatalarm == 1) {
    leds[160].red = (r + g + b) / 3;
    leds[161].red = (r + g + b) / 3;
    leds[222].red = (r + g + b) / 3;
    leds[223].red = (r + g + b) / 3;
  }
  if (mode == 0) {
    for (int i = 254; i >= 254 - secondes / 2; i--)
    {
      leds[i].red = (r + g + b) / 3;
      if (secondes % 2 == 0)
      {
        leds[254 - secondes / 2].green = (r + g + b) / 3;
        leds[51] = CRGB::Black;
        leds[179] = CRGB::Black;
      } else {
        leds[254 - secondes / 2].red = (r + g + b) / 3;
        leds[51].red = r;
        leds[51].green = g;
        leds[51].blue = b;
        leds[179].red = r;
        leds[179].green = g;
        leds[179].blue = b;
      }
    }
  }
  else if (mode == 1) {
    leds[203].red = r;
    leds[203].green = g;
    leds[203].blue = b;
    leds[180].red = r;
    leds[180].green = g;
    leds[180].blue = b;
    leds[140].red = r;
    leds[140].green = g;
    leds[140].blue = b;
    leds[115].red = r;
    leds[115].green = g;
    leds[115].blue = b;
    leds[77].red = r;
    leds[77].green = g;
    leds[77].blue = b;
    leds[50].red = r;
    leds[50].green = g;
    leds[50].blue = b;
  }
  else if (mode == 2) {
    leds[50].red = r;
    leds[50].green = g;
    leds[50].blue = b;
    leds[77].red = r;
    leds[77].green = g;
    leds[77].blue = b;
    leds[114].red = r;
    leds[114].green = g;
    leds[114].blue = b;
    leds[113].red = r;
    leds[113].green = g;
    leds[113].blue = b;
    leds[112].red = r;
    leds[112].green = g;
    leds[112].blue = b;
    leds[79].red = r;
    leds[79].green = g;
    leds[79].blue = b;
    leds[48].red = r;
    leds[48].green = g;
    leds[48].blue = b;
    leds[49].red = r;
    leds[49].green = g;
    leds[49].blue = b;
    leds[18].red = r;
    leds[18].green = g;
    leds[18].blue = b;
    leds[19].red = r;
    leds[19].green = g;
    leds[19].blue = b;
    leds[20].red = r;
    leds[20].green = g;
    leds[20].blue = b;
    leds[21].red = r;
    leds[21].green = g;
    leds[21].blue = b;
    leds[46].red = r;
    leds[46].green = g;
    leds[46].blue = b;
    leds[41].red = r;
    leds[41].green = g;
    leds[41].blue = b;
    leds[81].red = r;
    leds[81].green = g;
    leds[81].blue = b;
    leds[110].red = r;
    leds[110].green = g;
    leds[110].blue = b;
    leds[145].red = r;
    leds[145].green = g;
    leds[145].blue = b;
    leds[169].red = r;
    leds[169].green = g;
    leds[169].blue = b;
    leds[174].red = r;
    leds[174].green = g;
    leds[174].blue = b;
    leds[213].red = r;
    leds[213].green = g;
    leds[213].blue = b;
    leds[212].red = r;
    leds[212].green = g;
    leds[212].blue = b;
    leds[211].red = r;
    leds[211].green = g;
    leds[211].blue = b;
    leds[210].red = r;
    leds[210].green = g;
    leds[210].blue = b;
  }
  else if (mode == 3) {
    leds[49].red = r;
    leds[49].green = g;
    leds[49].blue = b;
    leds[48].red = r;
    leds[48].green = g;
    leds[48].blue = b;
    leds[45].red = r;
    leds[45].green = g;
    leds[45].blue = b;
    leds[78].red = r;
    leds[78].green = g;
    leds[78].blue = b;
    leds[79].red = r;
    leds[79].green = g;
    leds[79].blue = b;
    leds[81].red = r;
    leds[81].green = g;
    leds[81].blue = b;
    leds[111].red = r;
    leds[111].green = g;
    leds[111].blue = b;
    leds[143].red = r;
    leds[143].green = g;
    leds[143].blue = b;
    leds[145].red = r;
    leds[145].green = g;
    leds[145].blue = b;
    leds[146].red = r;
    leds[146].green = g;
    leds[146].blue = b;
    leds[177].red = r;
    leds[177].green = g;
    leds[177].blue = b;
    leds[174].red = r;
    leds[174].green = g;
    leds[174].blue = b;
    leds[173].red = r;
    leds[173].green = g;
    leds[173].blue = b;
  }
  else if (mode == 4) {
    leds[51].red = r;
    leds[51].green = g;
    leds[51].blue = b;
    leds[179].red = r;
    leds[179].green = g;
    leds[179].blue = b;
  }
  int pression = floor(bmp.readPressure() / 100);
  if (pression >= 1020) {
    leds[27].red = (r + g + b) / 3;
    leds[27].green = (r + g + b) / 3;
    leds[29].red = (r + g + b) / 3;
    leds[29].green = (r + g + b) / 3;
    leds[31].red = (r + g + b) / 3;
    leds[31].green = (r + g + b) / 3;
    leds[35].red = (r + g + b) / 3;
    leds[35].green = (r + g + b) / 3;
    leds[34].red = (r + g + b) / 3;
    leds[34].green = (r + g + b) / 3;
    leds[33].red = (r + g + b) / 3;
    leds[33].green = (r + g + b) / 3;
    leds[91].red = (r + g + b) / 3;
    leds[91].green = (r + g + b) / 3;
    leds[92].red = (r + g + b) / 3;
    leds[92].green = (r + g + b) / 3;
    leds[93].red = (r + g + b) / 3;
    leds[93].green = (r + g + b) / 3;
    leds[94].red = (r + g + b) / 3;
    leds[94].green = (r + g + b) / 3;
    leds[95].red = (r + g + b) / 3;
    leds[95].green = (r + g + b) / 3;
    leds[99].red = (r + g + b) / 3;
    leds[99].green = (r + g + b) / 3;
    leds[98].red = (r + g + b) / 3;
    leds[98].green = (r + g + b) / 3;
    leds[97].red = (r + g + b) / 3;
    leds[97].green = (r + g + b) / 3;
    leds[155].red = (r + g + b) / 3;
    leds[155].green = (r + g + b) / 3;
    leds[157].red = (r + g + b) / 3;
    leds[157].green = (r + g + b) / 3;
    leds[159].red = (r + g + b) / 3;
    leds[159].green = (r + g + b) / 3;
  }
  else if (pression <= 1000) {
    leds[27].red = (r + g + b) / 3;
    leds[27].green = (r + g + b) / 3;
    leds[27].blue = (r + g + b) / 3;
    leds[28].red = (r + g + b) / 3;
    leds[28].green = (r + g + b) / 3;
    leds[28].blue = (r + g + b) / 3;
    leds[29].red = (r + g + b) / 3;
    leds[29].green = (r + g + b) / 3;
    leds[29].blue = (r + g + b) / 3;
    leds[30].red = (r + g + b) / 3;
    leds[30].green = (r + g + b) / 3;
    leds[30].blue = (r + g + b) / 3;
    leds[37].red = (r + g + b) / 3;
    leds[37].green = (r + g + b) / 3;
    leds[37].blue = (r + g + b) / 3;
    leds[36].red = (r + g + b) / 3;
    leds[36].green = (r + g + b) / 3;
    leds[36].blue = (r + g + b) / 3;
    leds[35].red = (r + g + b) / 3;
    leds[35].green = (r + g + b) / 3;
    leds[35].blue = (r + g + b) / 3;
    leds[34].red = (r + g + b) / 3;
    leds[34].green = (r + g + b) / 3;
    leds[34].blue = (r + g + b) / 3;
    leds[33].red = (r + g + b) / 3;
    leds[33].green = (r + g + b) / 3;
    leds[33].blue = (r + g + b) / 3;
    leds[32].red = (r + g + b) / 3;
    leds[32].green = (r + g + b) / 3;
    leds[32].blue = (r + g + b) / 3;
    leds[91].red = (r + g + b) / 3;
    leds[91].green = (r + g + b) / 3;
    leds[91].blue = (r + g + b) / 3;
    leds[92].red = (r + g + b) / 3;
    leds[92].green = (r + g + b) / 3;
    leds[92].blue = (r + g + b) / 3;
    leds[93].red = (r + g + b) / 3;
    leds[93].green = (r + g + b) / 3;
    leds[93].blue = (r + g + b) / 3;
    leds[94].red = (r + g + b) / 3;
    leds[94].green = (r + g + b) / 3;
    leds[94].blue = (r + g + b) / 3;
    leds[100].blue = (r + g + b) / 3;
    leds[97].blue = (r + g + b) / 3;
    leds[155].blue = (r + g + b) / 3;
    leds[158].blue = (r + g + b) / 3;
  }
  else {
    leds[27].red = (r + g + b) / 3;
    leds[27].green = (r + g + b) / 3;
    leds[27].blue = (r + g + b) / 3;
    leds[28].red = (r + g + b) / 3;
    leds[28].green = (r + g + b) / 3;
    leds[28].blue = (r + g + b) / 3;
    leds[29].red = (r + g + b) / 3;
    leds[29].green = (r + g + b) / 3;
    leds[29].blue = (r + g + b) / 3;
    leds[30].red = (r + g + b) / 3;
    leds[30].green = (r + g + b) / 3;
    leds[30].blue = (r + g + b) / 3;
    leds[37].red = (r + g + b) / 3;
    leds[37].green = (r + g + b) / 3;
    leds[37].blue = (r + g + b) / 3;
    leds[36].red = (r + g + b) / 3;
    leds[36].green = (r + g + b) / 3;
    leds[36].blue = (r + g + b) / 3;
    leds[35].red = (r + g + b) / 3;
    leds[35].green = (r + g + b) / 3;
    leds[35].blue = (r + g + b) / 3;
    leds[34].red = (r + g + b) / 3;
    leds[34].green = (r + g + b) / 3;
    leds[34].blue = (r + g + b) / 3;
    leds[33].red = (r + g + b) / 3;
    leds[33].green = (r + g + b) / 3;
    leds[33].blue = (r + g + b) / 3;
    leds[32].red = (r + g + b) / 3;
    leds[32].green = (r + g + b) / 3;
    leds[32].blue = (r + g + b) / 3;
    leds[90].red = (r + g + b) / 3;
    leds[90].green = (r + g + b) / 3;
    leds[90].blue = (r + g + b) / 3;
    leds[91].red = (r + g + b) / 3;
    leds[91].green = (r + g + b) / 3;
    leds[91].blue = (r + g + b) / 3;
    leds[92].red = (r + g + b) / 3;
    leds[92].green = (r + g + b) / 3;
    leds[92].blue = (r + g + b) / 3;
    leds[93].red = (r + g + b) / 3;
    leds[93].green = (r + g + b) / 3;
    leds[93].blue = (r + g + b) / 3;
    leds[94].red = (r + g + b) / 3;
    leds[94].green = (r + g + b) / 3;
    leds[94].blue = (r + g + b) / 3;
    leds[95].red = (r + g + b) / 3;
    leds[95].green = (r + g + b) / 3;
    leds[95].blue = (r + g + b) / 3;
    leds[100].red = (r + g + b) / 3;
    leds[100].green = (r + g + b) / 3;
    leds[100].blue = (r + g + b) / 3;
    leds[99].red = (r + g + b) / 3;
    leds[99].green = (r + g + b) / 3;
    leds[99].blue = (r + g + b) / 3;
    leds[98].red = (r + g + b) / 3;
    leds[98].green = (r + g + b) / 3;
    leds[98].blue = (r + g + b) / 3;
    leds[97].red = (r + g + b) / 3;
    leds[97].green = (r + g + b) / 3;
    leds[97].blue = (r + g + b) / 3;
  }
  FastLED.show();
}

